var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RepeatingDecimalNotations]","category":"page"},{"location":"api/#RepeatingDecimalNotations.EllipsisNotation","page":"API","title":"RepeatingDecimalNotations.EllipsisNotation","text":"EllipsisNotation <: RepeatingDecimalNotation\n\nA type to represent a repeating decial with ellipsis notation like \"0.1666...\".\n\njulia> rd\"123.45678678...\"\n4111111//33300\n\njulia> no = EllipsisNotation()\nEllipsisNotation()\n\njulia> stringify(no, 1//11)\n\"0.0909...\"\n\njulia> rationalify(no, \"123.45678678...\")\n4111111//33300\n\njulia> rd\"0.4545...\"      # Same as 0.(45), repeating [45] two times\n5//11\n\njulia> rd\"0.333...\"       # Same as 0.(3), repeating one digit [3] three times\n1//3\n\njulia> rd\"0.13331333...\"  # Same as 0.(1333), repeating [1333] has priority over repeating [3]\n1333//9999\n\njulia> rd\"0.133313333...\" # Same as 0.13331(3), adding additional [3] resolves the ambiguity.\n19997//150000\n\n\n\n\n\n","category":"type"},{"location":"api/#RepeatingDecimalNotations.ParenthesesNotation","page":"API","title":"RepeatingDecimalNotations.ParenthesesNotation","text":"ParenthesesNotation <: RepeatingDecimalNotation\n\nA type to represent a repeating decial with parentheses notation like \"0.1(6)\".\n\njulia> rd\"123.45(678)\"\n4111111//33300\n\njulia> no = ParenthesesNotation()\nParenthesesNotation()\n\njulia> stringify(no, 1//11)\n\"0.(09)\"\n\njulia> rationalify(no, \"123.45(678)\")\n4111111//33300\n\n\n\n\n\n","category":"type"},{"location":"api/#RepeatingDecimalNotations.RepeatingDecimal","page":"API","title":"RepeatingDecimalNotations.RepeatingDecimal","text":"RepeatingDecimal\n\nIntermediate struct to represent a repeating decimal number.\n\nExamples\n\njulia> RepeatingDecimal(false, 12743, 857142, 2, 6)\n       2|--|------|6\n    -127.43(857142)\n----------- --------------\nFinite part Repeating part\n\njulia> RepeatingDecimal(1//17)\n         0||----------------|16\n        +0.(0588235294117647)\n----------- -------------------\nFinite part Repeating part\n\n\n\n\n\n","category":"type"},{"location":"api/#RepeatingDecimalNotations.RepeatingDecimalNotation","page":"API","title":"RepeatingDecimalNotations.RepeatingDecimalNotation","text":"Abstract supertype for repeating decimals notations.\n\n\n\n\n\n","category":"type"},{"location":"api/#RepeatingDecimalNotations.ScientificNotation","page":"API","title":"RepeatingDecimalNotations.ScientificNotation","text":"ScientificNotation <: RepeatingDecimalNotation\n\nA type to represent a repeating decial with scientific notation like \"0.1r6\".\n\njulia> rd\"123.45r678\"\n4111111//33300\n\njulia> no = ScientificNotation()\nScientificNotation()\n\njulia> stringify(no, 1//11)\n\"0.r09\"\n\njulia> rationalify(no, \"123.45r678\")\n4111111//33300\n\njulia> rd\"1.2345r678e2\"  # Exponent term is supported.\n4111111//33300\n\n\n\n\n\n","category":"type"},{"location":"api/#RepeatingDecimalNotations.rationalify","page":"API","title":"RepeatingDecimalNotations.rationalify","text":"rationalify(::Type{<:Integer}, ::RepeatingDecimalNotation, ::AbstractString)\nrationalify(::Type{<:Integer}, ::RepeatingDecimal)\nrationalify(::Type{<:Integer}, ::AbstractString)\nrationalify(::RepeatingDecimalNotation, ::AbstractString)\nrationalify(::RepeatingDecimal)\nrationalify(::AbstractString)\n\nGenerate String from Rational or RepeatingDecimal instance.\n\nExamples\n\njulia> using RepeatingDecimalNotations: rationalify  # `rationalify` is not exported.\n\njulia> rationalify(RepeatingDecimal(true, 123, 45, 2, 3))  # `RepeatingDecimal` to `Rational{Int}`\n6829//5550\n\njulia> rationalify(\"1.23r045\")  # `String` to `Rational{Int}`\n6829//5550\n\njulia> rationalify(EllipsisNotation(), \"1.23r045\")  # If notation style is specified, the input string should follow the style.\nERROR: invalid input!\nStacktrace:\n[...]\n\njulia> rationalify(Int128, \"1.23r045\")  # `String` to `Rational{Int128}`\n6829//5550\n\njulia> typeof(ans)\nRational{Int128}\n\n\n\n\n\n","category":"function"},{"location":"api/#RepeatingDecimalNotations.stringify","page":"API","title":"RepeatingDecimalNotations.stringify","text":"stringify(::RepeatingDecimalNotation, ::RepeatingDecimal)\nstringify(::RepeatingDecimalNotation, ::Rational)\nstringify(::RepeatingDecimal)\nstringify(::Rational)\n\nGenerate String from Rational or RepeatingDecimal instance.\n\nExamples\n\njulia> using RepeatingDecimalNotations: stringify  # `stringify` is not exported.\n\njulia> stringify(ScientificNotation(), RepeatingDecimal(true, 123, 45, 2, 3))\n\"1.23r045\"\n\njulia> stringify(EllipsisNotation(), 1//11)\n\"0.0909...\"\n\njulia> stringify(RepeatingDecimal(true, 123, 45, 2, 3))  # Defaults to `ParenthesesNotation()`.\n\"1.23(045)\"\n\njulia> stringify(1//11)\n\"0.(09)\"\n\n\n\n\n\n","category":"function"},{"location":"api/#RepeatingDecimalNotations.@rd_str-Tuple{Any}","page":"API","title":"RepeatingDecimalNotations.@rd_str","text":"@rd_str\n\nA string macro to create a rational number.\n\nExamples\n\njulia> r = rd\"123.4(56)\"  # 123.4565656...\n61111//495\n\njulia> rd\"1.234r56e2\"  # Other notations\n61111//495\n\njulia> rd\"123.45656...\"  # are also supported.\n61111//495\n\njulia> float(r)  # Check floating point number approximation.\n123.45656565656566\n\njulia> rd\"0.(9)\"  # 0.999... is equal to 1.\n1//1\n\njulia> rd\"0.99(9)\", rd\"1\", rd\"1.000_000\"  # The notation of repeating decimals is not unique.\n(1//1, 1//1, 1//1)\n\n\n\n\n\n","category":"macro"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"design/#Design","page":"Design","title":"Design","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"using RepeatingDecimalNotations\nusing RepeatingDecimalNotations: stringify, rationalify\nusing InteractiveUtils","category":"page"},{"location":"design/#Types-that-represents-repeating-decimals","page":"Design","title":"Types that represents repeating decimals","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"There are three types that represents a repeating decimal number; String, Rational, and RepeatingDecimal.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"Rational{T}\nStores a numerator and a denominator as T<:Real.\nThe representation is unique.\ne.g. 4111111//33300\nString\nStores characters that can represent repeating decimals directly.\nThe representation is not unique.\ne.g. \"123.45(678)\", \"123.456(786)\", \"123.456_786_786(786_786)\"\nRepeatingDecimal\nStores sign::Bool, finite_part::BigInt, repeat_part::BigInt, point_position::Int, and period::Int to represent a repeating decimal.\nThe representation is not unique.\ne.g. RepeatingDecimal(true, 12345, 678, 2, 3), RepeatingDecimal(true, 123456, 786, 3, 3), RepeatingDecimal(true, 123456_786_786, 786_786, 9, 6)","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"RepeatingDecimal(true, 12345, 678, 2, 3)\nRepeatingDecimal(true, 123456, 786, 3, 3)\nRepeatingDecimal(true, 123456_786_786, 786_786, 9, 6)","category":"page"},{"location":"design/#Converting-functions:-[stringify](@ref-RepeatingDecimalNotations.stringify),-[rationalify](@ref-RepeatingDecimalNotations.rationalify)","page":"Design","title":"Converting functions: stringify, rationalify","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"graph LR\n    A -- \"RepeatingDecimal\" --> C\n    A[String] -- \"rationalify\" --> B[Rational]\n    B -- \"RepeatingDecimal\" --> C[RepeatingDecimal]\n    C -- \"rationalify\" --> B\n    B -- \"stringify\" --> A\n    C -- \"stringify\" --> A","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"We avoided adding methods to Base.string and Base.rationalize not to induce type piracy.\nThese functions are not exported because the names of these functions does not imply relation to repeating decimals. Please use them like the following in your code.\nRepeatingDecimalNotations.stringify(...)\nimport RepeatingDecimalNotations: stringify\nusing RepeatingDecimalNotations: stringify","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"using RepeatingDecimalNotations\nusing RepeatingDecimalNotations: stringify, rationalify\nstr = \"123.45(678)\"\nrd = RepeatingDecimal(true,12345,678,2,3)\nr = 4111111//33300\nstr == stringify(rd) == stringify(r)\nrd == RepeatingDecimal(str) == RepeatingDecimal(r)\nr == rationalify(str) == rationalify(rd)","category":"page"},{"location":"design/#Subtypes-of-RepeatingDecimalNotation","page":"Design","title":"Subtypes of RepeatingDecimalNotation","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"There are several supported notations for repeating decimals.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"subtypes(RepeatingDecimalNotation)","category":"page"},{"location":"design/#[ParenthesesNotation](@ref)-(Default)","page":"Design","title":"ParenthesesNotation (Default)","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"12345(678)","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"rd\"123.45(678)\"\nno = ParenthesesNotation()\nstringify(no, 1//11)\nrationalify(no, \"123.45(678)\")","category":"page"},{"location":"design/#DotsNotation","page":"Design","title":"DotsNotation","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"12345dot67dot8","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"TODO: add support for \"123.456̇78̇\"","category":"page"},{"location":"design/#[ScientificNotation](@ref)","page":"Design","title":"ScientificNotation","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"12345textr678texte2","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"rd\"123.45r678\"\nno = ScientificNotation()\nstringify(no, 1//11)\nrationalify(no, \"123.45r678\")\nrd\"1.2345r678e2\"  # Exponent term is supported.","category":"page"},{"location":"design/#[EllipsisNotation](@ref)","page":"Design","title":"EllipsisNotation","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"12345678678","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"rd\"123.45678678...\"\nno = EllipsisNotation()\nstringify(no, 1//11)\nrationalify(no, \"123.45678678...\")\nrd\"0.4545...\"      # Same as 0.(45), repeating [45] two times\nrd\"0.333...\"       # Same as 0.(3), repeating one digit [3] three times\nrd\"0.13331333...\"  # Same as 0.(1333), repeating [1333] has priority over repeating [3]\nrd\"0.133313333...\" # Same as 0.13331(3), adding additional [3] resolves the ambiguity.","category":"page"},{"location":"design/#Non-supported-notation","page":"Design","title":"Non-supported notation","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"Vinculum notation 12345overline678 is not supported because it is hard to input with Unicode.","category":"page"},{"location":"design/#About-the-logo","page":"Design","title":"About the logo","text":"","category":"section"},{"location":"design/","page":"Design","title":"Design","text":"(Image: )","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"0dot6dot6 = 1218 is the birthday of the package.","category":"page"},{"location":"design/","page":"Design","title":"Design","text":"","category":"page"},{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"using RepeatingDecimalNotations\nusing RepeatingDecimalNotations: stringify, rationalify","category":"page"},{"location":"gallery/#Long-repeating-decimals","page":"Gallery","title":"Long repeating decimals","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"stringify(1//7)\nstringify(1//17)\nstringify(1//97)\nstringify(1//983)\nstringify(1//4967)","category":"page"},{"location":"gallery/#Fibonacchi-subsequence-in-repeating-part","page":"Gallery","title":"Fibonacchi subsequence in repeating part","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"stringify(1//89)\nstringify(1//9899)","category":"page"},{"location":"gallery/#Midy's-theorem","page":"Gallery","title":"Midy's theorem","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"stringify(1//7)\n142 + 857\nstringify(1//17)\n05882352 + 94117647\nstringify(1//19)\n052631578 + 947368421\n052631 + 578947 + 368421","category":"page"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"","category":"page"},{"location":"#RepeatingDecimalNotations.jl","page":"Home","title":"RepeatingDecimalNotations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to handle repeating decimal numbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Aqua QA) (Image: RepeatingDecimalNotations Downloads)","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using RepeatingDecimalNotations\nusing RepeatingDecimalNotations: stringify, rationalify\nr = rd\"123.4(56)\"  # 123.4565656...\nrd\"1.234r56e2\"  # Other notations\nrd\"123.45656...\"  # are also supported.\nfloat(r)  # Check floating point number approximation.\nrd\"0.(9)\"  # 0.999... is equal to 1.\nrd\"0.99(9)\", rd\"1\", rd\"1.000_000\"  # The notation of repeating decimals is not unique.\nstringify(1//7)  # Generate `String` from `Rational`.\nrationalify(\"0.1(6)\")  # vice versa.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
